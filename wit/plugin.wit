package plugin-app:core;

interface types {
  record command {
    /// The name of the command, must fullfil the following requirements:
    /// - not longer than 16 characters
    /// - no whitespaces
    /// - only alphanumeric characters
    name: string,
    /// The usage of the command.
    ///
    /// # Example
    ///
    /// help [cmd]
    usage: string,
    /// A useful message to the user that explains this command.
    description: string,
  }

  /// The informations the host expects to know after initialization.
  record plugin-info {
    /// The name of your plugin, the requirements are the same as the command names.
    name: string,
    /// A useful message of what the plugin is doing
    description: string,
    /// The version of this plugin, it must follow the semantic versioning format
    version: string,
    /// Commands defined by the plugin
    commands: list<command>,
  }

  /// Log level
  enum level {
    debug,
    info,
    warn,
    error,
  }
}

interface host-app {
  use types.{level};

  /// Log a msg with the given level to stdout
  log: func(lvl: level, msg: string);
}

world core {
  import host-app;

  use types.{plugin-info};

  /// Initilialize the plugin, and returns a plugin-info
  export init: func() -> plugin-info;

  // TODO: return a Result<(), ()>
  /// Run a command defined by this plugin with the given name and arguments
  export run-command: func(name: string, args: list<string>);
}
